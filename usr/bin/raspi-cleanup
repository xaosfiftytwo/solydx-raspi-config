#!/bin/bash

# Be root to run this script
if [ $UID -ne 0 ]; then
  echo "Please, type root password..."
  su -c "$0 $@"
  exit
fi

# Packages that deborphan must NOT treat as orphans - comma separated list
NotOrphan='baloo'

# Write the current up version
if [ -e '/usr/lib/solydxk/updatemanager/files' ]; then
  wget http://repository.solydxk.com/umfiles/repo.info
  if [ -e 'repo.info' ]; then
    VER=$(cat 'repo.info' | grep 'upd=')
    echo $VER > /usr/lib/solydxk/updatemanager/files/updatemanager.hist
    rm 'repo.info'
  fi
fi

# Cleanup
apt-get -y --force-yes clean
apt-get -y --force-yes autoremove
aptitude -y purge ~c
aptitude -y unmarkauto ~M
find . -type f -name "*.dpkg*" -exec rm {} \;

# Remove unavailable packages only when not manually held back
for PCK in $(env LANG=C bash -c "apt-show-versions | grep 'available' | cut -d':' -f1"); do
  REMOVE=true
  for HELDPCK in $(env LANG=C dpkg --get-selections | grep hold$ | awk '{print $1}'); do
    if [ $PCK == $HELDPCK ]; then
      REMOVE=false
    fi
  done
  if $REMOVE; then
    apt-get purge -y --force-yes $PCK
  fi
done

# Removing orphaned packages, except the ones listed in NotOrphan
echo "Removing orphaned packages . . ."
Exclude=${NotOrphan//,/\/d;/}
Orphaned=$(deborphan | sed '/'$Exclude'/d')
while [ "$Orphaned" ]; do
   apt-get -y --force-yes purge $Orphaned
   RC=$(dpkg-query -l | sed -n 's/^rc\s*\(\S*\).*/\1/p')
   [ "$RC" ] && apt-get -y --force-yes purge $RC
   Orphaned=$(deborphan | sed '/'$Exclude':/d')
done

# Set default SolydXK settings
/usr/lib/solydxk/system/adjust.py

# Refresh xapian database
update-apt-xapian-index

# Update database for mlocate
updatedb

# Recreate pixbuf cache
PB='/usr/lib/arm-linux-gnueabihf/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders'
if [ -e $PB ]; then
  $PB --update-cache
fi

# Settings for the firewall
ufw default deny incoming
ufw default allow outgoing
ufw allow CIFS
ufw disable

# Cleanup temporary files
rm -rf /media/*
rm -rf /var/backups/*
rm -rf /tmp/*
rm -rf /tmp/.??*
rm -rf /var/tmp/*
rm -rf /var/tmp/.??*
if [ -d /offline ]; then
  rm -rf /offline
fi

# Delete all log files
find /var/log -type f -delete

# Cleanup user files
CURUSR=$(logname)
rm "/home/$CURUSR/.bash_history" 2>/dev/null
rm "/home/$CURUSR/.xsession-*" 2>/dev/null
rm "/home/$CURUSR/.gksu.lock" 2>/dev/null

echo
echo "Run raspi-zerofill before making an image of the SD."
echo
